"use client"

import type React from "react"

import { useState, useEffect, useRef } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle, CardFooter } from "@/components/ui/card"
import { Textarea } from "@/components/ui/textarea"
import { Avatar } from "@/components/ui/avatar"
import { Loader2, Send, Bot, X, Maximize2, Minimize2 } from "lucide-react"
import { useRouter } from "next/navigation"

interface ChatMessage {
  id: string
  sender: string
  text: string
  timestamp: Date
}

type Message = {
  id: string
  role: "user" | "assistant"
  content: string
  timestamp: Date
}

type UserProfile = {
  userName: string
  favoriteColors: string[]
  dislikedColors: string[]
  preferredStyle: string
  occasions: string[]
  bodyType?: string
  likedOutfits: string[]
  dislikedOutfits: string[]
  lifestyle?: string
  personalityTraits?: string[]
  onboardingCompleted: boolean
}

const ArinChat: React.FC<{ autoOpen?: boolean }> = ({ autoOpen = false }) => {
  const [messages, setMessages] = useState<Message[]>([])
  const [inputMessage, setInputMessage] = useState("")
  const [isLoading, setIsLoading] = useState(false)
  const [isOpen, setIsOpen] = useState(autoOpen)
  const [isMinimized, setIsMinimized] = useState(!autoOpen)
  const [userProfile, setUserProfile] = useState<UserProfile | null>(null)
  const messagesEndRef = useRef<HTMLDivElement>(null)
  const router = useRouter()

  // Cargar perfil del usuario
  useEffect(() => {
    const storedPreferences = localStorage.getItem("userFashionPreferences")
    if (storedPreferences) {
      setUserProfile(JSON.parse(storedPreferences))

      // Si autoOpen es true, abrir el chat automÃ¡ticamente
      if (autoOpen) {
        openChat()
      }
    } else {
      // Si no hay perfil, usar valores por defecto
      const defaultProfile: UserProfile = {
        userName: "Usuario",
        favoriteColors: [],
        dislikedColors: [],
        preferredStyle: "",
        occasions: [],
        likedOutfits: [],
        dislikedOutfits: [],
        onboardingCompleted: false,
      }
      setUserProfile(defaultProfile)

      if (autoOpen) {
        openChat()
      }
    }
  }, [autoOpen])

  // Scroll al Ãºltimo mensaje
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" })
  }, [messages])

  // Abrir chat
  const openChat = async () => {
    setIsOpen(true)
    setIsMinimized(false)

    if (messages.length === 0) {
      setIsLoading(true)
      await new Promise((resolve) => setTimeout(resolve, 1000))

      // Mensaje inicial de ARIN con presentaciÃ³n completa
      const greeting: Message = {
        id: Date.now().toString(),
        role: "assistant",
        content: userProfile
          ? `Â¡Hola ${userProfile.userName}! ðŸ’• Soy ARIN, tu asistente personal de moda.

Mi misiÃ³n es ayudarte a optimizar el uso de todas las prendas que tenÃ©s en tu armario para crear looks increÃ­bles, revalorizando cada pieza que ya tenÃ©s.

Creo firmemente que no necesitÃ¡s comprar mÃ¡s ropa para verte espectacular - solo necesitÃ¡s aprender a combinar mejor lo que ya tenÃ©s. Paulatinamente, tambiÃ©n te voy a enseÃ±ar cÃ³mo tomar buenas decisiones de compra para que tu ropa sea funcional, dure mÃ¡s y nada quede olvidado en el fondo del armario. âœ¨

Â¿En quÃ© puedo ayudarte hoy?

â€¢ Subir una nueva prenda
â€¢ Ver tu colecciÃ³n
â€¢ Crear un look nuevo
â€¢ Ver tus looks guardados
â€¢ Revisar estadÃ­sticas`
          : `Â¡Hola! ðŸ’• Soy ARIN, tu asistente personal de moda.

Mi misiÃ³n es ayudarte a optimizar el uso de todas las prendas que tenÃ©s en tu armario para crear looks increÃ­bles, revalorizando cada pieza que ya tenÃ©s.

Creo firmemente que no necesitÃ¡s comprar mÃ¡s ropa para verte espectacular - solo necesitÃ¡s aprender a combinar mejor lo que ya tenÃ©s. Paulatinamente, tambiÃ©n te voy a enseÃ±ar cÃ³mo tomar buenas decisiones de compra para que tu ropa sea funcional, dure mÃ¡s y nada quede olvidado en el fondo del armario. âœ¨

Â¿En quÃ© puedo ayudarte hoy?

â€¢ Subir una nueva prenda
â€¢ Ver tu colecciÃ³n
â€¢ Crear un look nuevo
â€¢ Ver tus looks guardados
â€¢ Revisar estadÃ­sticas`,
        timestamp: new Date(),
      }

      setMessages([greeting])
      setIsLoading(false)
    }
  }

  // Cerrar chat
  const closeChat = () => {
    setIsOpen(false)
  }

  // Minimizar/maximizar chat
  const toggleMinimize = () => {
    setIsMinimized(!isMinimized)
  }

  // Generar respuesta de ARIN
  const generateArinResponse = async (userMessage: string): Promise<string> => {
    // Palabras clave para detectar intenciones de navegaciÃ³n
    const navigationKeywords = {
      upload: ["subir", "cargar", "agregar", "nueva prenda", "aÃ±adir ropa", "foto", "fotografÃ­a", "imagen"],
      gallery: ["galerÃ­a", "ver prendas", "mis prendas", "armario", "guardarropa", "ropa", "prendas"],
      suggest: ["sugerir", "look", "outfit", "combinaciÃ³n", "vestir", "combinar", "crear look", "generar look"],
      looks: ["mis looks", "looks guardados", "favoritos", "combinaciones guardadas"],
      stats: ["estadÃ­sticas", "stats", "uso", "anÃ¡lisis", "datos"],
      guide: ["guÃ­a", "ayuda", "tutorial", "cÃ³mo", "instrucciones", "manual"],
    }

    // Palabras clave para detectar intenciones generales
    const keywords = {
      suggestLook: ["look", "outfit", "vestir", "ropa", "sugerencia", "sugerir", "crear", "generar", "armario"],
      askStyle: ["estilo", "combinar", "combina", "color", "colores", "moda", "tendencia"],
      greeting: ["hola", "buenas", "hey", "saludos", "quÃ© tal", "como estas", "cÃ³mo estÃ¡s"],
      thanks: ["gracias", "genial", "excelente", "perfecto", "buenÃ­simo"],
      help: ["ayuda", "ayudame", "no sÃ©", "opciones", "quÃ© puedo hacer", "funciones", "quÃ© hacÃ©s"],
    }

    const message = userMessage.toLowerCase()

    // Detectar intenciÃ³n de navegaciÃ³n
    for (const [section, words] of Object.entries(navigationKeywords)) {
      if (words.some((word) => message.includes(word))) {
        // Preparar navegaciÃ³n
        setTimeout(() => {
          router.push(`/${section}`)
        }, 1000)

        const responses = {
          upload: "Â¡Vamos a subir una nueva prenda! Te llevo a la secciÃ³n de carga...",
          gallery: "Â¡Perfecto! Vamos a ver tu colecciÃ³n de prendas...",
          suggest: "Â¡Genial! Vamos a crear un look nuevo juntas...",
          looks: "Te llevo a ver tus looks guardados...",
          stats: "Vamos a revisar las estadÃ­sticas de tu armario...",
          guide: "Te muestro la guÃ­a de uso para que aproveches al mÃ¡ximo la app...",
        }

        return responses[section as keyof typeof responses]
      }
    }

    // Detectar intenciÃ³n de ayuda/opciones
    if (keywords.help.some((word) => message.includes(word))) {
      return `${userProfile?.userName ? `${userProfile.userName}, ` : ""}soy ARIN, tu asistente de armario personal. Puedo ayudarte con:

â€¢ Subir una nueva prenda a tu armario
â€¢ Ver tu colecciÃ³n de prendas
â€¢ Crear un look nuevo
â€¢ Ver tus looks guardados
â€¢ Revisar estadÃ­sticas de uso
â€¢ Mostrarte la guÃ­a de uso

Â¿QuÃ© te gustarÃ­a hacer?`
    }

    // Resto de la lÃ³gica existente
    if (keywords.suggestLook.some((word) => message.includes(word))) {
      return userProfile
        ? `Â¡Claro ${userProfile.userName}! Me encantarÃ­a ayudarte a crear un look. Â¿Para quÃ© ocasiÃ³n lo necesitÃ¡s? Â¿Casual, trabajo, salida...?`
        : "Â¡Claro! Me encantarÃ­a ayudarte a crear un look. Â¿Para quÃ© ocasiÃ³n lo necesitÃ¡s? Â¿Casual, trabajo, salida...?"
    }

    if (keywords.askStyle.some((word) => message.includes(word))) {
      if (userProfile && userProfile.favoriteColors.length > 0) {
        return `Sobre estilos y colores, recordÃ¡ que tus favoritos son ${userProfile.favoriteColors.join(", ")}. Estos combinan muy bien con tonos neutros como blanco, negro o beige. Â¿QuerÃ©s que te muestre algunas combinaciones especÃ­ficas?`
      }
      return "Los colores neutros como negro, blanco y gris combinan con todo. Para un look mÃ¡s interesante, podÃ©s aÃ±adir un toque de color con accesorios. Â¿Te gustarÃ­a que te muestre algunas combinaciones?"
    }

    if (keywords.greeting.some((word) => message.includes(word))) {
      return userProfile
        ? `Â¡Hola ${userProfile.userName}! ðŸ’• Â¿En quÃ© puedo ayudarte hoy? Puedo mostrarte tus prendas, crear un look, o lo que necesites.`
        : "Â¡Hola! ðŸ’• Â¿En quÃ© puedo ayudarte hoy? Puedo mostrarte tus prendas, crear un look, o lo que necesites."
    }

    if (keywords.thanks.some((word) => message.includes(word))) {
      return "Â¡De nada! ðŸ˜Š Siempre es un placer ayudarte. Â¿Hay algo mÃ¡s en lo que pueda asistirte?"
    }

    // Respuesta genÃ©rica
    const genericResponses = [
      userProfile
        ? `${userProfile.userName}, soy tu asistente de armario personal. Â¿QuerÃ©s que te ayude a navegar por la app? Puedo mostrarte tus prendas, crear un look, o lo que necesites.`
        : "Soy tu asistente de armario personal. Â¿QuerÃ©s que te ayude a navegar por la app? Puedo mostrarte tus prendas, crear un look, o lo que necesites.",
      "Como tu asistente de armario, puedo ayudarte a explorar tu colecciÃ³n o crear un nuevo look.",
      "Estoy aquÃ­ para ser tu asistente de armario. Â¿NecesitÃ¡s ayuda para encontrar algo especÃ­fico?",
      "Soy tu asistente personal de armario. Â¿QuerÃ©s ver tus prendas o crear una combinaciÃ³n nueva?",
    ]

    return genericResponses[Math.floor(Math.random() * genericResponses.length)]
  }

  // Enviar mensaje
  const handleSendMessage = async () => {
    if (!inputMessage.trim() || isLoading) return

    // Mensaje del usuario
    const userMessage: Message = {
      id: Date.now().toString(),
      role: "user",
      content: inputMessage,
      timestamp: new Date(),
    }

    setMessages((prev) => [...prev, userMessage])
    const currentInput = inputMessage
    setInputMessage("")
    setIsLoading(true)

    // Simular delay
    await new Promise((resolve) => setTimeout(resolve, 1500))

    try {
      // Generar respuesta
      const response = await generateArinResponse(currentInput)

      // Mensaje de ARIN
      const assistantMessage: Message = {
        id: Date.now().toString(),
        role: "assistant",
        content: response,
        timestamp: new Date(),
      }

      setMessages((prev) => [...prev, assistantMessage])
    } catch (error) {
      console.error("Error al generar respuesta:", error)

      // Mensaje de error
      const errorMessage: Message = {
        id: Date.now().toString(),
        role: "assistant",
        content: "Lo siento, ha ocurrido un error. Â¿PodÃ©s intentarlo de nuevo?",
        timestamp: new Date(),
      }

      setMessages((prev) => [...prev, errorMessage])
    } finally {
      setIsLoading(false)
    }
  }

  // Si no estÃ¡ abierto, mostrar botÃ³n flotante
  if (!isOpen) {
    return (
      <Button
        onClick={openChat}
        className="fixed bottom-6 right-6 rounded-full w-14 h-14 shadow-lg flex items-center justify-center bg-primary hover:bg-primary/90 z-50"
      >
        <Bot className="h-6 w-6" />
      </Button>
    )
  }

  return (
    <div className="fixed bottom-6 right-6 z-50">
      <Card className={`w-80 md:w-96 shadow-lg transition-all duration-300 ${isMinimized ? "h-14" : "h-[500px]"}`}>
        <CardHeader
          className="border-b p-3 flex flex-row items-center justify-between cursor-pointer"
          onClick={toggleMinimize}
        >
          <div className="flex items-center gap-2">
            <Avatar className="h-8 w-8 bg-primary/10">
              <Bot className="h-4 w-4 text-primary" />
            </Avatar>
            <CardTitle className="text-sm">ARIN</CardTitle>
          </div>
          <div className="flex gap-1">
            {isMinimized ? (
              <Maximize2 className="h-4 w-4 text-muted-foreground" />
            ) : (
              <>
                <Minimize2 className="h-4 w-4 text-muted-foreground" />
                <X
                  className="h-4 w-4 text-muted-foreground ml-2"
                  onClick={(e) => {
                    e.stopPropagation()
                    closeChat()
                  }}
                />
              </>
            )}
          </div>
        </CardHeader>

        {!isMinimized && (
          <>
            <CardContent className="p-3 h-[400px] overflow-y-auto">
              <div className="space-y-4">
                {messages.map((message) => (
                  <div key={message.id} className={`flex ${message.role === "user" ? "justify-end" : "justify-start"}`}>
                    <div
                      className={`rounded-lg p-3 max-w-[85%] ${
                        message.role === "user" ? "bg-primary text-primary-foreground" : "bg-muted"
                      }`}
                    >
                      <div className="whitespace-pre-wrap text-sm">{message.content}</div>
                    </div>
                  </div>
                ))}

                {isLoading && (
                  <div className="flex justify-start">
                    <div className="rounded-lg p-3 bg-muted flex items-center gap-2">
                      <Loader2 className="h-4 w-4 animate-spin" />
                      <span className="text-sm">Escribiendo...</span>
                    </div>
                  </div>
                )}

                <div ref={messagesEndRef} />
              </div>
            </CardContent>

            <CardFooter className="border-t p-3">
              <div className="flex w-full gap-2">
                <Textarea
                  placeholder="Escribe un mensaje..."
                  value={inputMessage}
                  onChange={(e) => setInputMessage(e.target.value)}
                  className="flex-1 resize-none min-h-[40px] max-h-[100px]"
                  rows={1}
                  onKeyDown={(e) => {
                    if (e.key === "Enter" && !e.shiftKey) {
                      e.preventDefault()
                      handleSendMessage()
                    }
                  }}
                />
                <Button size="sm" onClick={handleSendMessage} disabled={isLoading || !inputMessage.trim()}>
                  {isLoading ? <Loader2 className="h-4 w-4 animate-spin" /> : <Send className="h-4 w-4" />}
                </Button>
              </div>
            </CardFooter>
          </>
        )}
      </Card>
    </div>
  )
}

export { ArinChat }
